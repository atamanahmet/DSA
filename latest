
class MyLinkedList {

    class Node {
        int val;
        Node next;

        public Node(int x) {
            this.val = x;
            this.next = null;
        }
    }

    Node head;
    Node tail;
    int size;

    public MyLinkedList() {
        this.head = null;
        this.tail = null;
        this.size = 0;
    }

    public int get(int index) {
       print();
        int counter = 0;
        Node current = this.head;
        
        while (counter < this.size) {
            if(current==null){
                    return -1;
                }
            else if (counter == index) {
                return current.val;
            } 
            else {
                current = current.next;
                counter++;
            }
        }
        return -1;
    }

    public void addAtHead(int val) {
       print();

        Node newNode = new Node(val);

        Node temp = this.head;
        newNode.next = temp;
        this.head = newNode;
        if (this.tail == null) {
            this.tail = newNode;
        }
        this.size++;
    }

    public void addAtTail(int val) {
       print();

        if(size==0||this.tail==null){
            addAtHead(val);
            return;
        }
        Node newNode = new Node(val);
        Node oldTail = this.tail;
        oldTail.next = newNode;
        this.tail = newNode;
        this.size++;
    }

    public void addAtIndex(int index, int val) {
       print();

        int counter = 0;
        Node current = this.head;
        if(index>size){
            return;
        }
        else if (index == 0) {
            addAtHead(val);
        } else if (index == this.size) {
            addAtTail(val);
        } else {
            while (counter < size) {
                if (current == null) {
                    addAtTail(val);
                    break;
                }
                if (counter == index - 1) {
                    Node newNode = new Node(val);
                    Node after = current.next;
                    current.next = newNode;
                    newNode.next = after;
                    size++;
                    break;
                } else {
                    current = current.next;
                    counter++;
                }
            }
        }


    }

    public void deleteAtIndex(int index) {
        print();
        if(size==0|| index >= size){
            return;
        }
        if(this.head==null){
            return;
        }
        if (index == 0) {
            this.head = this.head.next;
            size--;
            return;
        }
        Node current = this.head;
        int counter = 0;
        while (counter < this.size) {
            if (counter == index - 1) {
                Node deleteNode = current.next;
                
                Node before = current;
                Node after = (before.next==null) ? null : (before.next.next==null)? null:before.next.next;
                before.next = after;
                if(deleteNode==this.tail){
                    if(after!=null)
                        this.tail=after;   
                }
                size--;
                break;
            } else {
                current = current.next;
                counter++;
            }
        }
    }
    public void print(){
         int c = 0;
        Node curr = this.head;
        String str = "";
        while (c < this.size) {
            if (curr == null) {
                break;
            }
            str += curr.val + "->";
            c++;
            curr = curr.next;
        }
        System.out.println(str);
    }

   
}
